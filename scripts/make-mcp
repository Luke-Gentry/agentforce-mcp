#!/usr/bin/env python3

import argparse
import os
import subprocess

from mcp_gen.openapi import Config
from jinja2 import Environment, FileSystemLoader
from mcp_gen.tools import tools_from_config


def generate_server(
    config: Config, output_dir: str, app_name: str, app_route: str, base_url: str
):
    os.makedirs(output_dir, exist_ok=True)
    env = Environment(
        loader=FileSystemLoader("templates"), trim_blocks=True, lstrip_blocks=True
    )

    # Get the template
    template = env.get_template("server.py.j2")
    tools = tools_from_config(config)
    output = template.render(
        app_name=app_name, app_route=app_route, base_url=base_url, tools=tools
    )

    # Write the output file and format it using Black to ensure it's clean and valid syntax.
    output_path = os.path.join(output_dir, f"{app_route}.py")
    with open(output_path, "w") as f:
        f.write(output)
    subprocess.run(["black", output_path], check=True, capture_output=True)

    return output_path


def main():
    parser = argparse.ArgumentParser(
        description="Generate Pydantic models from OpenAPI spec"
    )
    parser.add_argument(
        "-f", "--open-api-spec", required=True, help="Path to OpenAPI spec YAML file"
    )
    parser.add_argument("--routes", nargs="+", required=True, help="Routes to process")
    parser.add_argument(
        "--output-dir", default="servers", help="Output directory for generated servers"
    )
    parser.add_argument(
        "-n", "--app-name", required=True, help="Name of the application"
    )
    parser.add_argument(
        "-r", "--app-route", required=True, help="Route name for the application"
    )
    parser.add_argument("-u", "--base-url", required=True, help="Base URL for the API")

    args = parser.parse_args()

    config = Config.from_file(args.open_api_spec, args.routes)
    output_path = generate_server(
        config, args.output_dir, args.app_name, args.app_route, args.base_url
    )

    print(f"Generated server at: {output_path}")


if __name__ == "__main__":
    main()
