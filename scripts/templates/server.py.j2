from mcp.server.fastmcp import FastMCP, Context
from dataclasses import dataclass
from contextlib import asynccontextmanager
from typing import AsyncIterator
from pydantic import Field
import httpx

APP_NAME = "{{ app_name }}"
APP_ROUTE = "{{ app_route }}"

@dataclass
class AppContext:
    base_url: str

@asynccontextmanager
async def app_lifespan(server: FastMCP) -> AsyncIterator[AppContext]:
    """Manage application lifecycle with type-safe context"""
    base_url = "{{ base_url }}"
    try:
        yield AppContext(base_url=base_url)
    finally:
        pass

mcp = FastMCP(
    APP_NAME,
    lifespan=app_lifespan,
    sse_path=f"/{APP_ROUTE}/sse",
    message_path=f"/{APP_ROUTE}/messages/",
    debug=True,
)

{% for tool in tools %}
@mcp.tool(name="{{ tool.name }}"{% if tool.description %}, description="{{ tool.description }}"{% endif %})
async def {{ tool.name }}(
    ctx: Context,
    {% for param in tool.parameters %}
    {{ param.name }}: {{ param.type }}{% if param.description or param.default %} = Field({% if param.description %}description="{{ param.description }}"{% endif %}{% if param.description and param.default %}, {% endif %}{% if param.default %}default={{ param.default }}{% endif %}){% endif %}{{ "," if not loop.last }}
    {% endfor %}
) -> dict:
    {% if tool.description %}
    """{{ tool.description }}"""
    {% endif %}
    base_url = ctx.request_context.lifespan_context.base_url
    params = { {%- for param in tool.parameters if not param.name.startswith('j_') %}
        "{{ param.name }}": {{ param.name }}{{ "," if not loop.last }}
    {%- endfor %} }
    json = { {%- for param in tool.parameters if param.name.startswith('j_') %}
        "{{ param.name[2:] }}": {{ param.name }}{{ "," if not loop.last }}
    {%- endfor %} }
    
    async with httpx.AsyncClient() as client:
        response = await client.request(
            method="{{ tool.method }}",
            url=f"{base_url}{{ tool.path }}",
            params=params,
            json=json,
        )        
        return response.text

{% endfor %} 